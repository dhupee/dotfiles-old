# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must g\o above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# start ssh-agent automatically
if ! pgrep -u "$USER" ssh-agent > /dev/null; then
    ssh-agent -t 1h > "$XDG_RUNTIME_DIR/ssh-agent.env"
fi
if [[ ! -f "$SSH_AUTH_SOCK" ]]; then
    source "$XDG_RUNTIME_DIR/ssh-agent.env" >/dev/null
fi

# Enabling Fcitx5 for japanese input
export XMODIFIERS=@im=fcitx
export GTK_IM_MODULE=fcitx
export SDL_IM_MODULE=fcitx
export QT_IM_MODULE=fcitx

# Setup environment for pyenv
export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

# Setup environtment for Goenv
export GOENV_ROOT="$HOME/.goenv"
export PATH="$GOENV_ROOT/bin:$PATH"
export PATH="$GOROOT/bin:$PATH"
export PATH="$PATH:$GOPATH/bin"
eval "$(goenv init -)"

# zoxide
if command -v zoxide > /dev/null; then
    eval "$(zoxide init zsh)"
fi

# fly.io
export FLYCTL_INSTALL="/home/dhupee/.fly"
export PATH="$FLYCTL_INSTALL/bin:$PATH"

# If you come from bash you might have to change your $PATH.
# Use this also to save binary apps
export PATH=$HOME/.bin:/usr/local/bin:$PATH
export PATH=$HOME/.local/bin:/usr/local/bin:$PATH

# # Adding Tmuxifier in the path and export new layout path
# export PATH="$HOME/.tmux/plugins/tmuxifier/bin:$PATH"
# eval "$(tmuxifier init -)"
# export TMUXIFIER_LAYOUT_PATH="$HOME/.tmux-layouts"

# export completion cli to fpath
fpath=($HOME/.completion_zsh $fpath)

# Use brave as Chrome executable instead
export CHROME_EXECUTABLE="/opt/brave.com/brave/brave-browser"

# Path to your oh-my-zsh installation.
if [ -d $HOME/.oh-my-zsh ]; then
    export ZSH="$HOME/.oh-my-zsh"
fi

# Set ohmyzsh theme
ZSH_THEME="powerlevel10k/powerlevel10k"

# ohmyzsh update reminder setting
zstyle ':omz:update' mode reminder  # just remind me to update when its time

# Uncomment the following line to enable command auto-correction.
ENABLE_CORRECTION="true"

# Ohmyzsh plugins to load, including customs
plugins=(
    thefuck
    copypath
    docker
    podman
    qrcode
    nvm
    node
    npm
    pyenv
    python
    emoji
    golang
    zoxide
    zsh-syntax-highlighting
    zsh-autosuggestions
    zsh-autocomplete
)

# unused custom plugins commented here
#     zsh-history-substring-search

# Apparently broken in Nix, so check the dir
if [ -d $HOME/.oh-my-zsh/ ]; then
    source $HOME/.oh-my-zsh/oh-my-zsh.sh
fi

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# If nvim exist, use it as prefered editor, if not just use nano
if command -v nvim &> /dev/null; then
    export EDITOR=nvim
else
    export EDITOR=nano
fi


# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# source line for aliases
# if [ -e ~/.aliases.sh ]; then
  # source ~/.aliases.sh
# fi

# Sourcing aliases
if [ -d ~/.aliases/ ]; then
    # Loop through all .sh files in the aliases directory and source them
    for file in ~/.aliases/*.sh; do
        if [ -f "$file" ]; then
            source "$file"
        fi
    done
else
    echo "Aliases directory not found"
fi

# Sourcing thefuck
eval $(thefuck --alias --enable-experimental-instant-mode)

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# Initialize Platformio Core CLI
eval "$(_PIO_COMPLETE=zsh_source pio)"

# Add arduino-cli to PATH
export PATH=$PATH:$(which arduino-cli)

tmux-git-autofetch() {(/home/dhupee/.tmux/plugins/tmux-git-autofetch/git-autofetch.tmux --current &)}
add-zsh-hook chpwd tmux-git-autofetch

autoload -Uz compinit
zstyle ':completion:*' menu select
fpath+=~/.zfunc

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
